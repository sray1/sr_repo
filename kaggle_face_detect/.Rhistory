full_data <- mydata[,c("annual_inc","dti","earliest_cr_line","fico_range_low",
"fico_range_high","loan_amnt","delinq_2yrs","inq_last_6mths",
"collections_12_mths_ex_med","sub_grade")]
as.Date("Aug-1988", format = "%B-%Y")
View(mydata)
# LC data
mydata = read.csv("C:\\Startup.ML\\lending\\data\\lc_data_2008.csv")
#target_class <- mydata$grade
#LC_data <- mydata[,c("dti")]
full_data <- mydata[,c("annual_inc","dti","earliest_cr_line","fico_range_low",
"fico_range_high","loan_amnt","delinq_2yrs","inq_last_6mths",
"collections_12_mths_ex_med","sub_grade")]
View(full_data)
as.yearmon("Aug-1988")
install.packages("zoo")
library(zoo)
as.yearmon("Aug-1988")
as.yearmon("mar07", "%b%y")
as.yearmon("Mar-2007", "%b-%y")
as.yearmon("Mar-2007", "%b-%Y")
as.yearmon(full_data$earliest_cr_line)
# LC data
mydata = read.csv("C:\\Startup.ML\\lending\\data\\lc_data_2008.csv")
#target_class <- mydata$grade
#LC_data <- mydata[,c("dti")]
full_data <- mydata[,c("annual_inc","dti","earliest_cr_line","fico_range_low",
"fico_range_high","loan_amnt","delinq_2yrs","inq_last_6mths",
"collections_12_mths_ex_med","sub_grade")]
mod_data <- full_data
mod_data$fico_mean <- (mod_data$fico_range_low + mod_data$fico_range_high) * 0.5
mod_data$fico_range_low <- NULL
mod_data$fico_range_high <- NULL
mod_data <- mod_data[ ,c(1:7,9,8)]
mod_data$earliest_cr_line <- NULL
mod_data$collections_12_mths_ex_med <- NULL
#sort_data <- mod_data[order(mod_data$grade),]
#LC_results <- mdlp(sort_data)$Disc.data
LC_results <- chi2(mod_data)$Disc.data
library('discretization')
library('discretization')
mydata = read.csv("C:\\Startup.ML\\lending\\data\\lc_data_2008.csv")
#target_class <- mydata$grade
#LC_data <- mydata[,c("dti")]
full_data <- mydata[,c("annual_inc","dti","earliest_cr_line","fico_range_low",
"fico_range_high","loan_amnt","delinq_2yrs","inq_last_6mths",
"collections_12_mths_ex_med","sub_grade")]
mod_data <- full_data
mod_data$fico_mean <- (mod_data$fico_range_low + mod_data$fico_range_high) * 0.5
mod_data$fico_range_low <- NULL
mod_data$fico_range_high <- NULL
mod_data <- mod_data[ ,c(1:7,9,8)]
mod_data$earliest_cr_line <- NULL
mod_data$collections_12_mths_ex_med <- NULL
#sort_data <- mod_data[order(mod_data$grade),]
#LC_results <- mdlp(sort_data)$Disc.data
LC_results <- chi2(mod_data)$Disc.data
View(LC_results)
mydata = read.csv("C:\\Startup.ML\\lending\\data\\lc_data_2008.csv")
#target_class <- mydata$grade
#LC_data <- mydata[,c("dti")]
full_data <- mydata[,c("annual_inc","dti","earliest_cr_line","fico_range_low",
"fico_range_high","loan_amnt","delinq_2yrs","inq_last_6mths",
"collections_12_mths_ex_med","sub_grade")]
mod_data <- full_data
mod_data$fico_mean <- (mod_data$fico_range_low + mod_data$fico_range_high) * 0.5
mod_data$fico_range_low <- NULL
mod_data$fico_range_high <- NULL
mod_data <- mod_data[ ,c(1:7,9,8)]
mod_data$earliest_cr_line <- NULL
mod_data$collections_12_mths_ex_med <- NULL
#sort_data <- mod_data[order(mod_data$grade),]
#LC_results <- mdlp(sort_data)$Disc.data
LC_results <- mdlp(sort_data)
# LC data
mydata = read.csv("C:\\Startup.ML\\lending\\data\\lc_data_2008.csv")
#target_class <- mydata$grade
#LC_data <- mydata[,c("dti")]
full_data <- mydata[,c("annual_inc","dti","earliest_cr_line","fico_range_low",
"fico_range_high","loan_amnt","delinq_2yrs","inq_last_6mths",
"collections_12_mths_ex_med","sub_grade")]
mod_data <- full_data
mod_data$fico_mean <- (mod_data$fico_range_low + mod_data$fico_range_high) * 0.5
mod_data$fico_range_low <- NULL
mod_data$fico_range_high <- NULL
mod_data <- mod_data[ ,c(1:7,9,8)]
mod_data$earliest_cr_line <- NULL
mod_data$collections_12_mths_ex_med <- NULL
#sort_data <- mod_data[order(mod_data$grade),]
LC_results <- mdlp(sort_data)$Disc.data
#LC_results <- chi2(mod_data)$Disc.data
LC_results$$Disc.data
LC_results$cutp
# LC data
mydata = read.csv("C:\\Startup.ML\\lending\\data\\lc_data_2008.csv")
#target_class <- mydata$grade
#LC_data <- mydata[,c("dti")]
full_data <- mydata[,c("annual_inc","dti","earliest_cr_line","fico_range_low",
"fico_range_high","loan_amnt","delinq_2yrs","inq_last_6mths",
"collections_12_mths_ex_med","sub_grade")]
mod_data <- full_data
mod_data$fico_mean <- (mod_data$fico_range_low + mod_data$fico_range_high) * 0.5
mod_data$fico_range_low <- NULL
mod_data$fico_range_high <- NULL
mod_data <- mod_data[ ,c(1:7,9,8)]
mod_data$earliest_cr_line <- NULL
mod_data$collections_12_mths_ex_med <- NULL
#sort_data <- mod_data[order(mod_data$grade),]
LC_results <- mdlp(mod_data)
#LC_results <- chi2(mod_data)
LC_results$$Disc.data
LC_results$cutp
mod_data <- full_data
mod_data$fico_mean <- (mod_data$fico_range_low + mod_data$fico_range_high) * 0.5
mod_data$fico_range_low <- NULL
mod_data$fico_range_high <- NULL
mod_data <- mod_data[ ,c(1:7,9,8)]
mod_data$earliest_cr_line <- NULL
mod_data$collections_12_mths_ex_med <- NULL
#sort_data <- mod_data[order(mod_data$grade),]
LC_results <- mdlp(mod_data)
#LC_results <- chi2(mod_data)
LC_results$Disc.data
LC_results$cutp
mod_data <- full_data
mod_data$fico_mean <- (mod_data$fico_range_low + mod_data$fico_range_high) * 0.5
mod_data$fico_range_low <- NULL
mod_data$fico_range_high <- NULL
mod_data <- mod_data[ ,c(1:7,9,8)]
mod_data$earliest_cr_line <- NULL
mod_data$collections_12_mths_ex_med <- NULL
#sort_data <- mod_data[order(mod_data$grade),]
#LC_results <- mdlp(mod_data)
LC_results <- chi2(mod_data)
LC_results$Disc.data
LC_results$cutp
View(mod_data)
# LC data
mydata = read.csv("C:\\Startup.ML\\lending\\data\\lc_data_2008.csv")
#target_class <- mydata$grade
#LC_data <- mydata[,c("dti")]
full_data <- mydata[,c("annual_inc","dti","earliest_cr_line","fico_range_low",
"fico_range_high","loan_amnt","delinq_2yrs","inq_last_6mths",
"collections_12_mths_ex_med","sub_grade")]
mod_data <- full_data
mod_data$fico_mean <- (mod_data$fico_range_low + mod_data$fico_range_high) * 0.5
mod_data$fico_range_low <- NULL
mod_data$fico_range_high <- NULL
mod_data <- mod_data[ ,c(1:7,9,8)]
mod_data$earliest_cr_line <- NULL
mod_data$collections_12_mths_ex_med <- NULL
#sort_data <- mod_data[order(mod_data$grade),]
#LC_results <- mdlp(mod_data)
#LC_results <- chi2(mod_data)
LC_results <- chiM(mod_data)
LC_results$Disc.data
LC_results$cutp
full_data <- mydata[,c("annual_inc","dti","earliest_cr_line","fico_range_low",
"fico_range_high","loan_amnt","delinq_2yrs","inq_last_6mths",
"collections_12_mths_ex_med","sub_grade")]
mod_data <- full_data
mod_data$fico_mean <- (mod_data$fico_range_low + mod_data$fico_range_high) * 0.5
mod_data$fico_range_low <- NULL
mod_data$fico_range_high <- NULL
mod_data <- mod_data[ ,c(1:7,9,8)]
mod_data$earliest_cr_line <- NULL
mod_data$collections_12_mths_ex_med <- NULL
#sort_data <- mod_data[order(mod_data$grade),]
#LC_results <- mdlp(mod_data)
#LC_results <- chi2(mod_data)
#LC_results <- chiM(mod_data)
LC_results <- extendChi2(mod_data)
LC_results$Disc.data
LC_results$cutp
mydata = read.csv("C:\\Startup.ML\\lending\\data\\lc_data_2008.csv")
#target_class <- mydata$grade
#LC_data <- mydata[,c("dti")]
full_data <- mydata[,c("annual_inc","dti","earliest_cr_line","fico_range_low",
"fico_range_high","loan_amnt","delinq_2yrs","inq_last_6mths",
"collections_12_mths_ex_med","sub_grade")]
mod_data <- full_data
mod_data$fico_mean <- (mod_data$fico_range_low + mod_data$fico_range_high) * 0.5
mod_data$fico_range_low <- NULL
mod_data$fico_range_high <- NULL
mod_data <- mod_data[ ,c(1:7,9,8)]
mod_data$earliest_cr_line <- NULL
mod_data$collections_12_mths_ex_med <- NULL
#sort_data <- mod_data[order(mod_data$grade),]
#LC_results <- mdlp(mod_data)
#LC_results <- chi2(mod_data)
#LC_results <- chiM(mod_data)
LC_results <- modChi2(mod_data)
#LC_results <- extendChi2(mod_data)
LC_results$Disc.data
LC_results$cutp
# LC data
mydata = read.csv("C:\\Startup.ML\\lending\\data\\lc_data_2008.csv")
#target_class <- mydata$grade
#LC_data <- mydata[,c("dti")]
full_data <- mydata[,c("annual_inc","dti","earliest_cr_line","fico_range_low",
"fico_range_high","loan_amnt","delinq_2yrs","inq_last_6mths",
"collections_12_mths_ex_med","sub_grade")]
mod_data <- full_data
mod_data$fico_mean <- (mod_data$fico_range_low + mod_data$fico_range_high) * 0.5
mod_data$fico_range_low <- NULL
mod_data$fico_range_high <- NULL
mod_data <- mod_data[ ,c(1:7,9,8)]
mod_data$earliest_cr_line <- NULL
mod_data$collections_12_mths_ex_med <- NULL
#sort_data <- mod_data[order(mod_data$grade),]
#LC_results <- mdlp(mod_data)
LC_1 <- chi2(mod_data[,1])
LC_2 <- chi2(mod_data[,2])
LC_3 <- chi2(mod_data[,3])
LC_results <- chi2(mod_data)
library('discretization')
# LC data
mydata = read.csv("C:\\Startup.ML\\lending\\data\\lc_data_2008.csv")
#target_class <- mydata$grade
#LC_data <- mydata[,c("dti")]
full_data <- mydata[,c("annual_inc","dti","earliest_cr_line","fico_range_low",
"fico_range_high","loan_amnt","delinq_2yrs","inq_last_6mths",
"collections_12_mths_ex_med","sub_grade")]
mod_data <- full_data
mod_data$fico_mean <- (mod_data$fico_range_low + mod_data$fico_range_high) * 0.5
mod_data$fico_range_low <- NULL
mod_data$fico_range_high <- NULL
mod_data <- mod_data[ ,c(1:7,9,8)]
mod_data$earliest_cr_line <- NULL
mod_data$collections_12_mths_ex_med <- NULL
#sort_data <- mod_data[order(mod_data$grade),]
#LC_results <- mdlp(mod_data)
LC_1 <- chi2(mod_data[,1])
LC_2 <- chi2(mod_data[,2])
LC_3 <- chi2(mod_data[,3])
LC_results <- chi2(mod_data)
# LC data
mydata = read.csv("C:\\Startup.ML\\lending\\data\\lc_data_2008.csv")
#target_class <- mydata$grade
#LC_data <- mydata[,c("dti")]
full_data <- mydata[,c("annual_inc","dti","earliest_cr_line","fico_range_low",
"fico_range_high","loan_amnt","delinq_2yrs","inq_last_6mths",
"collections_12_mths_ex_med","sub_grade")]
mod_data <- full_data
mod_data$fico_mean <- (mod_data$fico_range_low + mod_data$fico_range_high) * 0.5
mod_data$fico_range_low <- NULL
mod_data$fico_range_high <- NULL
mod_data <- mod_data[ ,c(1:7,9,8)]
mod_data$earliest_cr_line <- NULL
mod_data$collections_12_mths_ex_med <- NULL
#sort_data <- mod_data[order(mod_data$grade),]
#LC_results <- mdlp(mod_data)
LC_1 <- chi2(mod_data[,c(1,8)])
LC_2 <- chi2(mod_data[,c(2,8)])
LC_3 <- chi2(mod_data[,c(3,8)])
LC_results <- chi2(mod_data)
View(mod_data)
LC_1 <- chi2(mod_data[,c(1,7)])
LC_2 <- chi2(mod_data[,c(2,7)])
LC_3 <- chi2(mod_data[,c(3,7)])
# LC data
mydata = read.csv("C:\\Startup.ML\\lending\\data\\lc_data_2008.csv")
#target_class <- mydata$grade
#LC_data <- mydata[,c("dti")]
full_data <- mydata[,c("annual_inc","dti","earliest_cr_line","fico_range_low",
"fico_range_high","loan_amnt","delinq_2yrs","inq_last_6mths",
"collections_12_mths_ex_med","sub_grade")]
mod_data <- full_data
mod_data$fico_mean <- (mod_data$fico_range_low + mod_data$fico_range_high) * 0.5
mod_data$fico_range_low <- NULL
mod_data$fico_range_high <- NULL
mod_data <- mod_data[ ,c(1:7,9,8)]
mod_data$earliest_cr_line <- NULL
mod_data$collections_12_mths_ex_med <- NULL
#sort_data <- mod_data[order(mod_data$grade),]
LC_results <- mdlp(mod_data)
x1<-sample(c(-1.5, 2.5), 1000)
length(unique(x1)) #absolute number of different variables
length(unique(x1))/length(x1) #relative
x2<-runif(1000)
length(unique(x2)) #absolute number of different variables
length(unique(x2))/length(x2) #relative
x1<-sample(c(-1.5, 2.5), 1000)
length(unique(x1)) #absolute number of different variables
length(unique(x1))/length(x1) #relative
x2<-runif(1000)
length(unique(x2)) #absolute number of different variables
length(unique(x2))/length(x2) #relative
x1<-sample(c(-1.5, 2.5), 1000)
fipszips("CA")
fipszips("CA")
install.packages("zipcode")
install.packages("data.table")
fipszips("CA")
fipszips <- function( stateAbbrev = stateAbbrev ){
packages <- c("data.table", "zipcode") # List of libraries
runLib <- function(packages = packages) {
packagesCheck <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(packagesCheck)) {install.packages(packagesCheck)}; rm(packagesCheck)
lapply(packages, function(x) {do.call("require", list(x))})
}
runLib(packages)
stateAbbrev <- as.character(stateAbbrev)
library(zipcode); data(zipcode); head(zipcode)
library(data.table)
stateTable <- read.table(textConnection(
"stateAbbreviation  fips	state
AK	2	ALASKA
AL	1	ALABAMA
AR	5	ARKANSAS
AS	60	AMERIICAN SAMOA
AZ	4	ARIZONA
CA	6	CALIFORNIA
CO	8	COLORADO
CT	9	CONNECTICUT
DC	11	DISTRICT OF COLUMBIA
DE	10	DELAWARE
FL	12	FLORIDA
GA	13	GEORGIA
GU	66	GUAM
HI	15	HAWAII
IA	19	IOWA
ID	16	IDAHO
IL	17	ILLINOIS
IN	18	INDIANA
KS	20	KANSAS
KY	21	KENTUCKY
LA	22	LOUISIANA
MA	25	MASSACHUSETTS
MD	24	MARYLAND
ME	23	MAINE
MI	26	MICHIGAN
MN	27	MINNESOTA
MO	29	MISSOURI
MS	28	MISSISSIPPI
MT	30	MONTANA
NC	37	NORTH CAROLINA
ND	38	NORTH DAKOTA
NE	31	NEBRASKA
NH	33	NEW HAMPSHIRE
NJ	34	NEW JERSEY
NM	35	NEW MEXICO
NV	32	NEVADA
NY	36	NEW YORK
OH	39	OHIO
OK	40	OKLAHOMA
OR	41	OREGON
PA	42	PENNSYLVANIA
PR	72	PUERTO RICO
RI	44	RHODE ISLAND
SC	45	SOUTH CAROLINA
SD	46	SOUTH DAKOTA
TN	47	TENNESSEE
TX	48	TEXAS
UT	49	UTAH
VA	51	VIRGINIA
VI	78	VIRGIN ISLANDS
VT	50	VERMONT
WA	53	WASHINGTON
WI	55	WISCONSIN
WV	54	WEST VIRGINIA
WY	56	WYOMING")
, sep = "\t", header=T, stringsAsFactors = T)
stateTable <<- data.table(stateTable)
stateTable$stateAbbreviation <- as.character(gsub("[[:space:]]", "", stateTable$stateAbbreviation))
stateFipCode <- stateTable[ which(stateTable$stateAbbreviation==stateAbbrev), ][,"fips"]
stateFipsString <- sprintf("%02.0f", stateFipCode)
## County FIP and names data
# http://www2.census.gov/geo/docs/reference/codes/files/st06_ca_cou.txt
countyFips <- data.table(read.table(url(paste0("http://www2.census.gov/geo/docs/reference/codes/files/st",stateFipsString, "_",
tolower(stateAbbrev),"_cou.txt")), quote = "", sep = ",", header = F, stringsAsFactors = F)); closeAllConnections()
# Clean county data per state
setnames(countyFips, names(countyFips), c("stateAbbreviation", "stateFips", "countyFips", "county","incorpType"))
countyFips$county <- gsub(" County", "", countyFips$county)
# Clean stateTable
stateTableNarrow <<- stateTable[ which(stateTable$stateAbbreviation == stateAbbrev),]
stateTableNarrow <- data.table(stateTableNarrow)
setkeyv(countyFips, "stateAbbreviation")
setkeyv(stateTableNarrow, "stateAbbreviation")
fullTable <- merge(stateTableNarrow, countyFips, all = T, allow.cartesian=T)[,fips:=NULL]
## Community and Municipality FIPS data   /st",stateFipCode, "_",
# http://www2.census.gov/geo/docs/reference/codes/files/st06_ca_places.txt
placeFips <- data.table(read.table(url(paste0("http://www2.census.gov/geo/docs/reference/codes/files/st",stateFipsString, "_",
tolower(stateAbbrev),"_places.txt")), quote = "", sep = "|", header = F, stringsAsFactors = T)); closeAllConnections()
setnames(placeFips, names(placeFips), c("stateAbbreviation", "stateFips", "placeFips", "place","censusPlaceType","placeSym","county"))
placeFips <- placeFips[,stateFips:=NULL]
# gsub remove last word " CDP" | " city" | " town"
placeFips$place <- gsub(" town","", gsub(" CDP","", gsub(" city","",placeFips$place)))
# placeFips$place # gsub remove " County"
placeFips$county <- gsub(" County","",placeFips$county)
placeFips <-  placeFips[, stateAbbreviation:=NULL]
setkeyv(fullTable,"county")
setkeyv(placeFips, "county")
# options( datatable.print.topn = 30)
fullTable <- merge(fullTable, placeFips, all = T, allow.cartesian = T )
## Munge zipcode data
zipData <- zipcode[ which(zipcode$state==stateAbbrev), ]
names(zipData)[which( names(zipData) == "state")] <- "stateAbbreviation"
names(zipData)[which( names(zipData) == "city")] <- "place"
zipData <- data.table(zipData)
zipData <- zipData[,stateAbbreviation:=NULL]
setkeyv( zipData , "place" )
setkeyv( fullTable, "place" )
fullTable <- merge(fullTable, zipData , all = T , allow.cartesian = T)[,incorpType:=NULL]
# # NOTE: Replaces State Census NAs with matched values per state. Zip codes may cross state boundaries
# for(i in 1:length(fullTable$state)){
#   if(is.na(fullTable$state)[i]){
#     as.character(fullTable$state)[i] <- as.character(stateTableNarrow[,"state"])
#   }
# }
#
#
# for(i in 1:length(fullTable$stateFips)){
#   if(is.na(fullTable$stateFips)[i]){
#     as.integer(fullTable$stateFips)[i] <- as.integer(stateTableNarrow[,"fips"])
#   }
# }
#
# for(i in 1:length(fullTable$stateAbbreviation)){
#   if(is.na(fullTable$stateAbbreviation)[i]){
#     fullTable$stateAbbreviation[i] <- as.character(stateTableNarrow[,"stateAbbreviation"])
#   }
# }
fullTable <<- fullTable
censusPlaceTypes <<- table(placeFips$placeType)
censusPlaces <<- length(unique(placeFips$place))
uniqueZipPlaces <<- dim( zipcode[which(zipcode$state=="CA"),] )[1]
# fullTable[ which(fullTable$county=="Los Angeles"),]
uniqueCensusPlaces <<- unique(placeFips$place)
#Stats: Counties in State
countyCount <<- length(unique(countyFips$county))
cat("Census Places in", stateAbbrev, ":", censusPlaces, "\n" )
cat("Zip Places in", stateAbbrev,":", uniqueZipPlaces , "\n")
cat("Counties in", stateAbbrev,":", countyCount)
closeAllConnections()
}
fipszips("CA")
fipszips("WA")
# create variables to store the path to the files
data.dir   <- '~/'
train.file <- paste0('Data/', 'training.csv')
test.file  <- paste0('Data/', 'test.csv')
# read in csv files
d.train <- read.csv(train.file, stringsAsFactors=F)
# Compactly display structure
str(d.train)
getdr
getwdr
getwd()
setwd("C:\python_repo\sr_repo\kaggle_face_detect")
setwd("C:/python_repo/sr_repo/kaggle_face_detect")
# create variables to store the path to the files
setwd("C:/python_repo/sr_repo/kaggle_face_detect")
data.dir   <- '~/'
train.file <- paste0('Data/', 'training.csv')
test.file  <- paste0('Data/', 'test.csv')
# read in csv files
d.train <- read.csv(train.file, stringsAsFactors=F)
# Compactly display structure
str(d.train)
# help on read.csv function
?read.csv
# first rows displayed
head(d.train)
# remove rightmost column from dataframe and save in seperate variable
im.train      <- d.train$Image
d.train$Image <- NULL
head(d.train)
im.train[1]
as.integer(unlist(strsplit(im.train[1], " ")))
t_im <- as.integer(unlist(strsplit(im.train[1], " ")))
install.packages("doSNOW")
install.packages("foreach")
library('doSNOW')
library('foreach')
cl <- makeCluster(2)
registerDoSNOW(cl)
# implement the parallelization
im.train <- foreach(im = im.train, .combine=rbind) %dopar% {
as.integer(unlist(strsplit(im, " ")))
}
# im.train is now a matrix with 7049 rows (one for each image) and 9216 columns
# (one for each pixel):
str(im.train)
# Repeat the process for test.csv, as we are going to need it later.
# Notice in the test file, we don’t have the first 30 columns with the keypoint locations.
d.test  <- read.csv(test.file, stringsAsFactors=F)
im.test <- foreach(im = d.test$Image, .combine=rbind) %dopar% {
as.integer(unlist(strsplit(im, " ")))
}
d.test$Image <- NULL
# save all four variables into the data.Rd file:
save(d.train, im.train, d.test, im.test, file='data.Rd')
# To visualize each image, we need to first convert these 9216 integers into 96x96 matrix
# im.train[1,] returns first row of im.train, which corresponds to the first training
# image. rev reverse the resulting vector to match interpretation of R's image function
# (which expects origin to be in lower left corner).
im <- matrix(data=rev(im.train[1,]), nrow=96, ncol=96)
# display image
image(1:96, 1:96, im, col=gray((0:255)/255))
# color the coordinates for the eyes and nose:
points(96-d.train$nose_tip_x[1],         96-d.train$nose_tip_y[1],         col="red")
points(96-d.train$left_eye_center_x[1],  96-d.train$left_eye_center_y[1],  col="blue")
points(96-d.train$right_eye_center_x[1], 96-d.train$right_eye_center_y[1], col="green")
# where are the centers of each nose in the 7049 images?
for(i in 1:nrow(d.train)) {
points(96-d.train$nose_tip_x[i], 96-d.train$nose_tip_y[i], col="red")
}
# Looking at one extreme example we get this:
idx <- which.max(d.train$nose_tip_x)
im  <- matrix(data=rev(im.train[idx,]), nrow=96, ncol=96)
image(1:96, 1:96, im, col=gray((0:255)/255))
points(96-d.train$nose_tip_x[idx], 96-d.train$nose_tip_y[idx], col="red")
